<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>13th-March</title>
    <link href="/2024/03/13/13th-March/"/>
    <url>/2024/03/13/13th-March/</url>
    
    <content type="html"><![CDATA[<h2 id="To-do-List"><a href="#To-do-List" class="headerlink" title="To-do List"></a>To-do List</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 算法</p><ul><li><input checked="" disabled="" type="checkbox"> bfs &amp;&amp; trie树</li></ul></li><li><p><input disabled="" type="checkbox"> 项目</p><ul><li><input checked="" disabled="" type="checkbox"> cmu15445</li><li><input disabled="" type="checkbox"> mit6.824</li><li><input disabled="" type="checkbox"> mit6.081</li></ul></li><li><p><input disabled="" type="checkbox"> 八股</p><ul><li><input checked="" disabled="" type="checkbox"> 操作系统</li><li><input checked="" disabled="" type="checkbox"> 计算机网络</li><li><input disabled="" type="checkbox"> 数据库</li><li><input disabled="" type="checkbox"> redis</li></ul></li><li><p><input checked="" disabled="" type="checkbox"> 日常总结</p></li></ul><h3 id="1-算法"><a href="#1-算法" class="headerlink" title="1.算法"></a>1.算法</h3><h4 id="I-bfs"><a href="#I-bfs" class="headerlink" title="I.bfs"></a>I.bfs</h4><p><a href="https://leetcode.cn/problems/word-ladder/description/?envType=study-plan-v2&envId=top-interview-150">单词接龙</a></p><p>题面：<img src="/../imgs/13th-March/image-20240313171436208.png" alt="image-20240313171436208"></p><p>解答：其实都是很经典的队列bfs 和其他同类型的其他两个几乎一样 但是我也不知道为什么他是hard </p><p>用队列存储状态 然后再递归 理解bfs的精髓就好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-type">int</span> sz = q.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++) &#123;<br>                string curr = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; l; j++) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">26</span>; k++) &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;a&#x27;</span> + k != curr[j]) &#123;<br>                            string next = curr;<br>                            next[j] = <span class="hljs-string">&#x27;a&#x27;</span> + k;<br>                            <span class="hljs-keyword">if</span> (!visited.<span class="hljs-built_in">count</span>(next) &amp;&amp; cnt.<span class="hljs-built_in">count</span>(next)) &#123;<br>                                <span class="hljs-keyword">if</span> (next == end) &#123;<br>                                    <span class="hljs-keyword">return</span> step;<br>                                &#125;<br>                                q.<span class="hljs-built_in">emplace</span>(next);<br>                                visited.<span class="hljs-built_in">emplace</span>(next);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            step++;<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="II-Trie树"><a href="#II-Trie树" class="headerlink" title="II.Trie树"></a>II.Trie树</h4><p><a href="https://leetcode.cn/problems/word-search-ii/description/?envType=study-plan-v2&envId=top-interview-150">单词搜索II</a></p><p>题面：</p><p><img src="/../imgs/13th-March/image-20240313171824850.png" alt="image-20240313171824850"></p><p>题解：就不放经典的Trie了，这个才是真正的应用，将每个单词insert，再遍历整个二维数组用dfs，能访问到的就加入答案</p><p>Trie模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>    string word;<br>    unordered_map&lt;<span class="hljs-type">char</span>,TrieNode *&gt; children; <span class="hljs-comment">//还有就是可以用vector存 size26</span><br>    <span class="hljs-built_in">TrieNode</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;word = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(TrieNode *root,<span class="hljs-type">const</span> string &amp; word)</span> </span>&#123;<br>    TrieNode *node = root;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> c : word) &#123;<br>        <span class="hljs-keyword">if</span> (!node-&gt;children.<span class="hljs-built_in">count</span>(c)) &#123;<br>            node-&gt;children[c] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>();<br>        &#125;<br>        node = node-&gt;children[c];<br>    &#125;<br>    node-&gt;word = word;<br>&#125;<br></code></pre></td></tr></table></figure><p>dfs代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, TrieNode * root, set&lt;string&gt; &amp; res)</span> </span>&#123;<br>        <span class="hljs-type">char</span> ch = board[x][y];        <br>        <span class="hljs-keyword">if</span> (!root-&gt;children.<span class="hljs-built_in">count</span>(ch)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        root = root-&gt;children[ch];<br>        <span class="hljs-keyword">if</span> (root-&gt;word.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">0</span>) &#123;<br>            res.<span class="hljs-built_in">insert</span>(root-&gt;word);<br>        &#125;<br><br>        board[x][y] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i) &#123;<br>            <span class="hljs-type">int</span> nx = x + dirs[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ny = y + dirs[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (nx &gt;= <span class="hljs-number">0</span> &amp;&amp; nx &lt; board.<span class="hljs-built_in">size</span>() &amp;&amp; ny &gt;= <span class="hljs-number">0</span> &amp;&amp; ny &lt; board[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-keyword">if</span> (board[nx][ny] != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>                    <span class="hljs-built_in">dfs</span>(board, nx, ny, root,res);<br>                &#125;<br>            &#125;<br>        &#125;<br>        board[x][y] = ch;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;      <br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-项目"><a href="#2-项目" class="headerlink" title="2.项目"></a>2.项目</h3><h4 id="cmu15445"><a href="#cmu15445" class="headerlink" title="cmu15445"></a>cmu15445</h4><p>进度：p3task1 大概看了一下 主要是query plan？ 到时候再看怎么看看代码</p><h3 id="3-八股"><a href="#3-八股" class="headerlink" title="3.八股"></a>3.八股</h3><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>（1）在浏览器中输入URL并按下回车之后会发生什么</p><p>第一步：输入URL并解析</p><p>对URL进行解析，获得协议、主机、端口、路径等信息，并构造一个HTTP请求（强制缓存 or 协商缓存）</p><p>第二步：DNS域名解析</p><p>将域名解析为对应的IP地址</p><p>第三步：建立TCP三次握手链接</p><p>Q：为什么是三次，不是两次、四次？握手丢失会发生什么，过程中可以携带数据吗</p><p>第四步：浏览器发送HTTP&#x2F;HTTPS请求到web服务器</p><p>Q：HTTP&#x2F;HTTPS的区别，请求状态码1xx-5xx</p><p>第五步：服务器处理HTTP请求并返回HTTP报文</p><p>服务器接收请求并将其传递给请求处理程序并发送HTTP响应，内容：请求的网页以及状态码、压缩类型、如何缓存的页面、设置的cookie；</p><p>第六步：浏览器渲染页面</p><p>第七步：断开连接TCP4次握手</p><p><img src="/../imgs/13th-March/image-20240313182738368.png" alt="image-20240313182738368"></p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h5 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h5><h6 id="1-进程基础"><a href="#1-进程基础" class="headerlink" title="1.进程基础"></a>1.进程基础</h6><p>(1)进程的概念</p><p>我们编写的代码只是一个存储在硬盘的静态文件，通过编译后就会生成二进制可执行文件，当我们运行这个可执行文件后，它就会被装载到内存中，接着CPU会执行程序中的每一条指令，那么这个运行中的程序，就被称为 <strong>[进程]（process)</strong></p><p>所以说，进程是具有独立功能的程序在一个数据集合上运行的过程，是系统进行资源分配和调度的一个独立单位。</p><p>（2）进程控制块（PCB）</p><p>系统通过<strong>PCB</strong>来描述进程的基本情况和运行状态，进而控制和管理进程，它是进程存在的唯一标识，包括：进程描述信息、进程控制和管理信息、进程资源分配清单、CPU相关信息</p><p><strong>PCB</strong>通常是通过链表的方式进行组织，把具有相同状态的进程链在一起，组成各种队列。</p><p>（3）并发与并行</p><p>单个处理核在很短时间内分别执行多个进程，成为并发</p><p>多个处理核同时执行多个进程称为并行</p><p>对于并发来说，CPU需要从一个进程切换到另一个进程，在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行</p><p><img src="/../imgs/13th-March/image-20240313193807222.png" alt="image-20240313193807222"></p><p>（4）进程的状态切换</p><p>我们知道了并发会执行进程的切换，这就需要进程有运行状态和停止状态，实际上某个进程在某个时刻所处的态分为一下三种：</p><ul><li><p><strong>运行态</strong>：该时刻进程占用CPU</p></li><li><p><strong>就绪态</strong>：可运行，由于其他进程处于运行状态而暂停运行</p></li><li><p><strong>阻塞态</strong>：该进程正在等待某一事件的发生（如IO操作）而暂时停止运行</p><p><img src="/../imgs/13th-March/image-20240313194129133.png" alt="image-20240313194129133"></p></li></ul><p>如果有大量处于阻塞状态的进程，进程可能会占用着物理内存空间，所以系统通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存，那么就需要一个新的状态，来描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态。这跟阻塞状态是不一样的，阻塞是等待某个时间的返回。</p><p>分为阻塞挂起和阻塞就绪状态</p><p>（5）进程的上下文切换</p><p>一个进程切换到另一个进程运行，称为进程的上下文切换，<strong>进程的上下文切换</strong>不仅包含了虚拟内存、栈、全局变量等用户空间的资源，还包括内核堆栈、寄存器等内核空间的资源。</p><p>（6）进程的创建</p><p>一个进程可以创建另一个进程，此时创建者为父进程，被创建的进程为子进程，操作系统创建一个新进程的过程如下：</p><ul><li>为新进程分配一个独特的进程控制块（PCB）</li><li>为新进程分配所需要的资源，如内存、CPU时间等</li><li>初始化进程控制块（PCB）的各种字段，包括状态、优先级、寄存器初始值等。</li><li>将其状态设置为就绪状态，使其能够被调度执行。进程进入就绪队列，等待分配处理器时间。</li></ul><p>（7）进程的终止</p><ul><li>根据标识符，查找需要终止的进程的PCB</li><li>如果进程处于执行状态，则立即终止该进程的执行，然后将处理器资源分配给其他进程</li><li>如果还有子进程，则将其子进程交给1号进程接管</li><li>将该进程所拥有的全部资源都归还给操作系统</li><li>将其从PCB所在队列中删除</li></ul><p>（8）进程的阻塞</p><ul><li>找到被阻塞进程的标识符对应的PCB</li><li>如果该进程为运行状态，则保护其现场，将其状态转为阻塞状态，停止运行</li><li>将该PCB插入到等待队列中，将处理机资源调度给其他就绪进程</li></ul><p>（9）进程的唤醒</p><ul><li>在该事件的阻塞队列中找到相应进程的PCB</li><li>将其从阻塞队列中移出，并置为就绪状态</li><li>将PCB插入到就绪队列中，等待调度程序调度</li></ul><h6 id="2-线程基础"><a href="#2-线程基础" class="headerlink" title="2.线程基础"></a>2.线程基础</h6><p>（1）什么是线程？</p><p>线程是“轻量级线程”，是进程中的一个实体，是程序执行的最小单位，也是被系统独立调度和分配的基本单位。</p><p>线程是进程当中的一条执行流程，同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相互独立的。</p><p>（2）线程的特点</p><ul><li>线程是一个“轻量级线程”，一个进程中可以有多个线程，线程不拥有系统资源，但是也有PCB，创建线程使用的底层函数和进程一样，都是clone</li><li>各个线程之间可以并发执行</li><li>同一个进程中的各个线程共享该进程所拥有的资源</li><li>进程可以蜕变成线程</li></ul><p>实际上，无论是创建进程的fork，还是创建线程的pthread_create，底层实现都是调用同一个内核函数clone</p><p>linux内核是不区分线程和进程的，只在用户层面上进行区分。所以，线程所有操作函数pthread_*是库函数，而非系统调用</p><p>（3）进程和线程的比较</p><p>​<strong>进程是资源（包括内存、打开的文件等）分配的单位，线程是CPU调度的单位</strong></p><hr><ul><li>资源：进程是系统中拥有资源的基本单位，而线程不拥有系统资源（只有寄存器和栈），但线程可以访问隶属进程的系统资源</li><li>调度：线程切换的代价远低于进程，在同一个进程中，线程的切换不会引起进程切换，而从一个进程中的线程切换到另一个进程的线程中，会引起进程切换</li><li>并发：进程可以并发执行，而一个进程中的多个线程之间也能并发执行，甚至不同进程中的线程也能并发执行，从而是的操作系统拥有更好的并发性，提高了系统资源的利用率和系统的吞吐量</li><li>独立性：每个进程都拥有独⽴的地址空间和资源、除了共享全局变量，不允许其他进程访问。某进程中的线程对其他进程都不可⻅，同⼀进程中的不同线程是为了提⾼并发性以及进⾏相互之间的合作⽽创建的，它们共享进程的地址空间和资源。</li><li>系统开销：线程所需要的开销比进程小</li></ul><p>（4）线程的状态：</p><ul><li>执行状态</li><li>就绪状态</li><li>阻塞状态</li></ul><p>（5）线程的实现</p><ol><li>用户线程：用户空间实现的线程，操作系统不直接参与</li><li>内核线程：操作系统管理、调度，PCB存放在内核中</li><li>轻量级线程：内核支持的用户线程</li></ol><p>（6）线程共享资源</p><ul><li>文件描述符表</li><li>每种信号的处理方式</li><li>当前工作目录</li><li>用户ID和组ID</li></ul><p>（7）线程非共享资源</p><ul><li>线程id</li><li>处理器现场和栈指针</li><li>独立的栈空间</li><li>errno变量（？这是什么）</li><li>信号屏蔽字</li><li>调度优先级</li></ul><p>（8）线程的优缺点</p><p><strong>优点:</strong></p><ul><li>提高程序并发性</li><li>开销小</li><li>数据通信、共享数据方便</li></ul><p><strong>缺点:</strong></p><ul><li>库函数，不稳定</li><li>调试、编写困难、gdb不支持</li><li>对信号支持不好</li></ul><p>（9）线程如何减少开销</p><ol><li>线程创建快、进程创建需要资源管理信息，比如内存管理信息和文件管理信息，而线程创建后是共享其所属进程的资源管理信息</li><li>线程终止时间快，需回收的仅有少量寄存器和私有的栈区</li><li>线程切换快，因为线程切换仅涉及到少量寄存器和栈区，而进程上下文切换有CPU寄存器和程序寄存器、虚拟内存空间、页表切换等</li><li>线程因为创建时共享了其所属进程绝大多数资源，因此天生具有很好的线程间通信交互效率</li></ol><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>投递进度</p><table><thead><tr><th>公司</th><th>进度</th><th>备注</th></tr></thead><tbody><tr><td>字节</td><td>简历评估</td><td></td></tr><tr><td>快手</td><td>系统研发存储 已投</td><td></td></tr><tr><td>携程</td><td>已投</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12th-March</title>
    <link href="/2024/03/12/12th-March/"/>
    <url>/2024/03/12/12th-March/</url>
    
    <content type="html"><![CDATA[<h2 id="To-do-List"><a href="#To-do-List" class="headerlink" title="To-do List"></a>To-do List</h2><ul><li><p><input checked="" disabled="" type="checkbox"> 算法</p><ul><li><input checked="" disabled="" type="checkbox"> graph</li></ul></li><li><p><input disabled="" type="checkbox"> 项目</p><ul><li><input checked="" disabled="" type="checkbox"> cmu15445</li><li><input disabled="" type="checkbox"> mit6.824</li><li><input disabled="" type="checkbox"> mit6.081</li></ul></li><li><p><input disabled="" type="checkbox"> 八股</p><ul><li><input disabled="" type="checkbox"> 操作系统</li><li><input disabled="" type="checkbox"> 计算机网络</li><li><input disabled="" type="checkbox"> 数据库</li><li><input disabled="" type="checkbox"> redis</li></ul></li><li><p><input disabled="" type="checkbox"> 日常总结</p></li></ul><h3 id="1-算法"><a href="#1-算法" class="headerlink" title="1.算法"></a>1.算法</h3><h4 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h4><p>(1)<a href="https://leetcode.cn/problems/surrounded-regions/description/?envType=study-plan-v2&envId=top-interview-150">leetcode被围绕的区域</a></p><p>题面：<img src="/../imgs/12th-March/image-20240312215015214.png" alt="image-20240312215015214"></p><p>解答：从边缘的点开始dfs，先标记为’A’,再重新遍历修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt; &amp;board, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= n || j &lt; <span class="hljs-number">0</span> || j &gt;= m || board[i][j] != <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        board[i][j] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i<span class="hljs-number">-1</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>) <span class="hljs-built_in">dfs</span>(board, i - <span class="hljs-number">1</span>, j);<br>        <span class="hljs-keyword">if</span> (j - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i][j<span class="hljs-number">-1</span>] == <span class="hljs-string">&#x27;O&#x27;</span>) <span class="hljs-built_in">dfs</span>(board, i, j - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; n &amp;&amp; board[i+<span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>) <span class="hljs-built_in">dfs</span>(board, i + <span class="hljs-number">1</span>, j);<br>        <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; m &amp;&amp; board[i][j+<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;O&#x27;</span>) <span class="hljs-built_in">dfs</span>(board, i, j + <span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>(2)<a href="https://leetcode.cn/problems/course-schedule/description/?envType=study-plan-v2&envId=top-interview-150">leetcode课程表</a></p><p>题面：</p><p><img src="/../imgs/12th-March/image-20240312215238605.png" alt="image-20240312215238605"></p><p>题解：主要是拓扑排序，要是自己写可能就记录每个点的入度？然后从0开始，再一个一个遍历。但是其他题解是dfs，仔细想了想确实精妙。从一个点开始dfs，遍历他所有的节点，然后记录状态，最后记录当前节点，并放入答案中。</p><p>dfs重要代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> </span>&#123;<br>        visited[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v: edges[u]) &#123;<br>            <span class="hljs-keyword">if</span> (visited[v] == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-built_in">dfs</span>(v);<br>                <span class="hljs-keyword">if</span> (!valid) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (visited[v] == <span class="hljs-number">1</span>) &#123;<br>                valid = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        visited[u] = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-项目"><a href="#2-项目" class="headerlink" title="2.项目"></a>2.项目</h3><h4 id="cmu15445"><a href="#cmu15445" class="headerlink" title="cmu15445"></a>cmu15445</h4><p>Query Planning</p><p>emmm懒得总结了 大概就是说logical优化和physical优化</p><h3 id="3-八股"><a href="#3-八股" class="headerlink" title="3.八股"></a>3.八股</h3><p>今天没看。。。下次再说</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>今天搞的有点少。。主要是晚上全在鼓捣这玩意，先好好准备一下周末的蚂蚁笔试，饿了么也可以</p><p>投递进度</p><table><thead><tr><th>公司</th><th>进度</th><th>备注</th></tr></thead><tbody><tr><td>腾讯</td><td>已投递</td><td>等捞？</td></tr><tr><td>字节</td><td>已投递</td><td></td></tr><tr><td>百度</td><td>无消息 已投递</td><td></td></tr><tr><td>蚂蚁</td><td>3.16笔试</td><td></td></tr><tr><td>美团</td><td>笔试完</td><td></td></tr><tr><td>阿里云</td><td>已投递</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>diary</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/12/hello-world/"/>
    <url>/2024/03/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
